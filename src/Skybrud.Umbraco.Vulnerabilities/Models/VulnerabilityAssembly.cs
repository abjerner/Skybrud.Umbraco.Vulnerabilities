using System;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Text.RegularExpressions;
using Newtonsoft.Json;

namespace Skybrud.Umbraco.Vulnerabilities.Models {

    public class VulnerabilityAssembly {

        private string _version;
        private string _fileVersion;

        [JsonProperty("alias")]
        public string Alias { get; set; }

        [JsonProperty("version")]
        public string VersionRaw {
            get => _version;
            set { _version = value; VersionRanges = ParseVersionRanges(value); }
        }

        [JsonProperty("fileVersion")]
        public string FileVersionRaw {
            get => _fileVersion;
            set { _fileVersion = value; FileVersionRanges = ParseVersionRanges(value); }
        }

        public VulnerabilityVersionRange[] VersionRanges { get; private set; }

        public VulnerabilityVersionRange[] FileVersionRanges { get; private set; }

        public bool IsAffected(Assembly assembly) {

            string alias = assembly.FullName.Split(',')[0];

            if (!String.Equals(alias, Alias, StringComparison.CurrentCultureIgnoreCase)) return false;

            Version version = assembly.GetName().Version;

            Version fileVersion = Version.Parse(FileVersionInfo.GetVersionInfo(assembly.Location).FileVersion);

            if (FileVersionRanges != null && FileVersionRanges.Any(x => x.IsAffected(fileVersion))) return true;

            return VersionRanges != null && VersionRanges.Length > 0 && VersionRanges.Any(x => x.IsAffected(version));

        }

        private VulnerabilityVersionRange[] ParseVersionRanges(string raw) {

            if (String.IsNullOrWhiteSpace(raw)) return new VulnerabilityVersionRange[0];

            Match m1 = Regex.Match(raw, "^([0-9\\.]+)$");
            Match m2 = Regex.Match(raw, "^\\[([0-9\\.]+)$");
            Match m3 = Regex.Match(raw, "^([0-9\\.]+)\\]$");

            Match m4 = Regex.Match(raw, "^\\[([0-9\\.]+),([(0-9\\.]+)\\]$");
            Match m5 = Regex.Match(raw, "^\\[([0-9\\.]+),([(0-9\\.]+)\\)$");

            Match m6 = Regex.Match(raw, "^([0-9\\.]+)\\)$");


            try {
                
                if (m1.Success) {
                    Version version = ParseVersion(m1.Groups[1].Value);
                    return new[] { new VulnerabilityVersionRange(version) };
                }

                if (m2.Success) {
                    Version from = new Version(0, 0, 0, 0);
                    Version to = ParseVersion(m2.Groups[1].Value);
                    return new[] { new VulnerabilityVersionRange(from, true, to, false) };
                }

                if (m3.Success) {
                    Version from = new Version(0, 0, 0, 0);
                    Version to = ParseVersion(m3.Groups[1].Value);
                    return new[] { new VulnerabilityVersionRange(from, true, to, true) };
                }

                if (m4.Success) {
                    Version from = ParseVersion(m4.Groups[1].Value);
                    Version to = ParseVersion(m4.Groups[2].Value);
                    return new[] { new VulnerabilityVersionRange(from, true, to, true) };
                }

                if (m5.Success) {
                    Version from = ParseVersion(m5.Groups[1].Value);
                    Version to = ParseVersion(m5.Groups[2].Value);
                    return new[] { new VulnerabilityVersionRange(from, true, to, false) };
                }

                if (m6.Success) {
                    Version from = new Version(0, 0, 0, 0);
                    Version to = ParseVersion(m6.Groups[1].Value);
                    return new[] { new VulnerabilityVersionRange(from, true, to, false) };
                }

            } catch (Exception ex) {

                throw new Exception("Unable to parse version: " + raw, ex);

            }

            throw new Exception("Unable to parse version: " + raw);

        }

        private Version ParseVersion(string value) {

            // Append an extra zero so "1.9.6" becomes "1.9.6.0"
            if (value.Split('.').Length == 3) value += ".0";

            return Version.Parse(value);

        }

    }

}